type Forum {
  forum_id: ID!
  creator: ID!
  name: String
  admins: [ID!]
  users: [ID!]
  isPrivilage: Boolean
}

type SimpleForum {
  forum_id: ID!
  name: String
}

type User {
  id: ID!
  name: String
  img: String
}

type Message {
  id: ID!
  text: String
  sender: User
  time: Float
}

type ForumMessage {
  forum: Forum
  messages: [Message]
}

type ReqJoinForum {
  fid: ID
  reqUser: User
  reqInfo: String
}

type Notify {
  id: ID!
  state: Int!
  kind: Int!
  message: String!
  time: Float!
  reqJoin: ReqJoinForum
}

type Ack {
  code: Int
  tips: String
}

type AckForums {
  ack: Ack
  data: [Forum]
}

type AckSimpleForums {
  ack: Ack
  data: [SimpleForum]
}

type AckUsers {
  ack: Ack
  data: [User]
}

type AckMessages {
  ack: Ack
  data: [Message]
}

type AckUser {
  ack: Ack
  data: User
}

type AckNotifies {
  ack: Ack
  data: [Notify]
}

type AckForum {
  ack: Ack
  data: Forum
}

type AckForumMessage {
  ack: Ack
  data: ForumMessage
}

type AckMessage {
  ack: Ack
  data: Message
}

type Query {
  myForums(uid: ID!): AckForums
  forums(uid: ID!): AckSimpleForums
  members(uid: ID!, fid: ID!): AckUsers
  messages(uid: ID, fid: ID, offset: Int, showCount: Int): AckMessages
  userInfo(uid: ID!): AckUser
  myNotifies(uid: ID!): AckNotifies
}

input ForumInput {
  name: String
  isPrivilage: Boolean
}

type Mutation {
  createForum(uid: ID!, forum: ForumInput): AckForum
  joinForum(uid: ID!, fid: ID!): AckForumMessage
  postMessage(uid: ID!, fid: ID!, text: String): AckMessage
  processReq(uid: ID!, nid: ID!, yes: Boolean): Ack
}
